name: Build Ubuntu 22.04 Image

on:
  workflow_dispatch

jobs:
  build:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v2
    
    - name: 'Navigate to Workspace'
      run: cd $GITHUB_WORKSPACE

    - name: 'dir just for debug'
      run: |
        dir

    - name: 'Ensure Resource Group exists'
      shell: pwsh
      run: |
        $subscriptionId="${{ secrets.SUBSCRIPTIONID }}"
        $resourceGroup="${{ vars.UbuntuImageResourceGroup }}"
        $location="${{ vars.Region }}"
        
        az login --service-principal -u ${{ secrets.APPLICATIONID }} -p ${{ secrets.SECRET }} --tenant ${{ secrets.TENANTID }}
        az account set --subscription $subscriptionId
        
        # Create the resource group if it doesn't exist
        az group create --name $resourceGroup --location $location

    - name: 'Build Ubuntu 2204 Image'
      shell: pwsh
      run: |
        git clone https://github.com/actions/virtual-environments.git
        cd ./virtual-environments
        Import-Module .\helpers\GenerateResourcesAndImage.ps1
        GenerateResourcesAndImage -SubscriptionId ${{ secrets.SUBSCRIPTIONID }} -ResourceGroupName ${{ vars.UbuntuImageResourceGroup }} -ImageGenerationRepositoryRoot "$pwd" -ImageType Ubuntu2204 -AzureLocation ${{ vars.Region }} -AzureClientId ${{ secrets.APPLICATIONID }} -AzureClientSecret ${{ secrets.SECRET }} -AzureTenantId ${{ secrets.TENANTID }}


    - name: 'Export Image'
      shell: pwsh
      run: |
        # env for source image
        $subscriptionId="${{ secrets.SUBSCRIPTIONID }}"
        $resourceGroup="${{ vars.UbuntuImageResourceGroup }}"
        $imageName="Runner-Image-Ubuntu2204"
        
        # env for target gallery
        $newGalleryName="${{ vars.GALERYNAME }}"
        $newGalleryResourceGroup="${{ vars.GALERYNAME }}"
        $location="${{ vars.Region }}"
        $imageDefinition=$imageName
        
        
        # Login to Azure
        az login --service-principal -u ${{ secrets.APPLICATIONID }} -p ${{ secrets.SECRET }} --tenant ${{ secrets.TENANTID }}
        
        # Set the subscription context
        az account set --subscription $subscriptionId
        
        # Create a new resource group for the gallery if it doesn't exist
        az group create --name $newGalleryResourceGroup --location $location
        
        # Create a new image gallery
        az sig create --resource-group $newGalleryResourceGroup --gallery-name $newGalleryName --location $location
        
        # Create an image definition in the gallery
        az sig image-definition create --hyper-v-generation v1 --resource-group $newGalleryResourceGroup --gallery-name $newGalleryName --gallery-image-definition $imageDefinition --os-type Linux --publisher RunnerImage --offer RunnerImage --sku Runner --os-state generalized
        
        # Finally, copy the image to the gallery
        
        az sig image-version create --resource-group $newGalleryResourceGroup --gallery-name $newGalleryName --gallery-image-definition $imageDefinition --gallery-image-version 1.0.0 --location $location --managed-image "/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.Compute/images/$imageName"
        
        # Create storage account name (lowercase)
        $storageAccountName = "DevOpsPackerAgentvUbuntu2204".ToLower() -replace '[^a-z]', ''
        $imageName="Runner-Image-Ubuntu2204"
                
        # env for target gallery
        $imageDefinition=$imageName
        
        # Create storage account
        az storage account create --name $storageAccountName --resource-group $newGalleryResourceGroup --location $location --sku Standard_LRS
        
        # Get storage account key
        $storageKey = az storage account keys list --resource-group $newGalleryResourceGroup --account-name $storageAccountName --query "[0].value" -o tsv
        
        # Create container
        az storage container create --name vhd --account-name $storageAccountName --account-key $storageKey
        
        
        # Get the latest image version from the gallery
        $latestImageVersion = az sig image-version list `
            --resource-group $newGalleryResourceGroup `
            --gallery-name $newGalleryName `
            --gallery-image-definition $imageDefinition `
            --query "[-1].name" -o tsv
        
        Write-Host "Latest image version: $latestImageVersion"
        
        # Create managed disk from gallery image
        $diskName = "$imageName-disk-$(Get-Date -Format 'yyyyMMddHHmmss')"
        Write-Host "Creating managed disk: $diskName"
        
        az disk create `
            --resource-group $resourceGroup `
            --name $diskName `
            --location $location `
            --gallery-image-reference "/subscriptions/$subscriptionId/resourceGroups/$newGalleryResourceGroup/providers/Microsoft.Compute/galleries/$newGalleryName/images/$imageDefinition/versions/$latestImageVersion"
        
        # Grant access to the disk and get SAS URL (valid for 10 hour for export)
        Write-Host "Granting access to disk for export..."
        $diskSasUrl = az disk grant-access `
            --resource-group $resourceGroup `
            --name $diskName `
            --duration-in-seconds 36000 `
            --query "accessSas" -o tsv
        
        # Export disk to storage account
        $vhdBlobName = "$diskName.vhd"
        Write-Host "Exporting disk to storage account as: $vhdBlobName"
        
        $escapedDiskSasUrl = $diskSasUrl -replace '&', '`&'
        az storage blob copy start --destination-container vhd --destination-blob $vhdBlobName --account-name $storageAccountName --account-key $storageKey --source-uri '$diskSasUrl'
        
        # Wait for copy to complete
        Write-Host "Waiting for copy operation to complete..."
        do {
            $copyStatus = az storage blob show --container-name vhd --name $vhdBlobName --account-name $storageAccountName --account-key $storageKey --query "properties.copy.status" -o tsv
            
            Write-Host "Copy status: $copyStatus"
            if ($copyStatus -ne "success") {
                Start-Sleep -Seconds 30
            }
        } while ($copyStatus -ne "success")
        
        # Revoke disk access
        Write-Host "Revoking disk access..."
        az disk revoke-access --resource-group $resourceGroup --name $diskName
        az disk delete --resource-group $resourceGroup --name $diskName
        
        
        # Generate SAS token for VHD (7 days expiration)
        $expiryDate = (Get-Date).AddDays(7).ToString("yyyy-MM-ddTHH:mm:ssZ")
        Write-Host "Generating SAS token (expires: $expiryDate)..."
        
        $sasToken = az storage blob generate-sas `
            --container-name vhd `
            --name $vhdBlobName `
            --account-name $storageAccountName `
            --account-key $storageKey `
            --permissions r `
            --expiry $expiryDate `
            --https-only `
            -o tsv
        
        # Construct full URL with SAS token
        $vhdUrlWithSas = "https://$storageAccountName.blob.core.windows.net/vhd/$vhdBlobName?$sasToken"
        
        Write-Host "`n========================================="
        Write-Host "VHD Export Complete!"
        Write-Host "========================================="
        Write-Host "VHD Blob Name: $vhdBlobName"
        Write-Host "SAS Token (7 days): $sasToken"
        Write-Host "`nFull URL with SAS:"
        Write-Host $vhdUrlWithSas
        Write-Host "=========================================`n"
