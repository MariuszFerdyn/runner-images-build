name: Build Ubuntu 22.04 Image

on:
  workflow_dispatch

jobs:
  build:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v2
    
    - name: 'Navigate to Workspace'
      run: cd $GITHUB_WORKSPACE

    - name: 'dir just for debug'
      run: |
        dir

    - name: 'Build Ubuntu 2204 Image'
      shell: pwsh
      run: |
        git clone https://github.com/actions/virtual-environments.git
        cd ./virtual-environments
        Import-Module .\helpers\GenerateResourcesAndImage.ps1
        GenerateResourcesAndImage -SubscriptionId ${{ secrets.SUBSCRIPTIONID }} -ResourceGroupName ${{ vars.UbuntuImageResourceGroup }} -ImageGenerationRepositoryRoot "$pwd" -ImageType Ubuntu2204 -AzureLocation ${{ vars.Region }} -AzureClientId ${{ secrets.APPLICATIONID }} -AzureClientSecret ${{ secrets.SECRET }} -AzureTenantId ${{ secrets.TENANTID }}


    - name: 'Export Image'
      shell: pwsh
      run: |
        # env for source image
        $subscriptionId="${{ secrets.SUBSCRIPTIONID }}"
        $resourceGroup="${{ vars.UbuntuImageResourceGroup }}"
        $imageName="Runner-Image-Ubuntu2204"
        
        # env for target gallery
        $newGalleryName="${{ vars.GALERYNAME }}"
        $newGalleryResourceGroup="${{ vars.GALERYNAME }}"
        $location="${{ vars.Region }}"
        $imageDefinition=$imageName
        
        
        # Login to Azure
        az login --service-principal -u ${{ secrets.APPLICATIONID }} -p ${{ secrets.SECRET }} --tenant ${{ secrets.TENANTID }}
        
        # Set the subscription context
        az account set --subscription $subscriptionId
        
        # Create a new resource group for the gallery if it doesn't exist
        az group create --name $newGalleryResourceGroup --location $location
        
        # Create a new image gallery
        az sig create --resource-group $newGalleryResourceGroup --gallery-name $newGalleryName --location $location
        
        # Create an image definition in the gallery
        az sig image-definition create --hyper-v-generation v1 --resource-group $newGalleryResourceGroup --gallery-name $newGalleryName --gallery-image-definition $imageDefinition --os-type Linux --publisher RunnerImage --offer RunnerImage --sku Runner --os-state generalized
        
        # Finally, copy the image to the gallery
        
        az sig image-version create --resource-group $newGalleryResourceGroup --gallery-name $newGalleryName --gallery-image-definition $imageDefinition --gallery-image-version 1.0.0 --location $location --managed-image "/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.Compute/images/$imageName"
        
        # Create storage account name (lowercase)
        $storageAccountName = "${{ vars.UbuntuImageResourceGroup }}".ToLower() -replace '[^a-z0-9]', ''
        
        # Create storage account
        az storage account create --name $storageAccountName --resource-group $newGalleryResourceGroup --location $location --sku Standard_LRS
        
        # Get storage account key
        $storageKey = az storage account keys list --resource-group $newGalleryResourceGroup --account-name $storageAccountName --query "[0].value" -o tsv
        
        # Create container
        az storage container create --name vhd --account-name $storageAccountName --account-key $storageKey
        
        # Export image to VHD
        # First, get the image ID
        $imageId = az image show --resource-group $resourceGroup --name $imageName --query "id" -o tsv
        
        # Grant access to the image and get SAS URL
        $sasUrl = az image grant-access --resource-group $resourceGroup --name $imageName --duration-in-seconds 3600 --query "accessSas" -o tsv
        
        # Copy VHD to storage account
        $vhdName = "$imageName.vhd"
        az storage blob copy start --destination-blob $vhdName --destination-container vhd --account-name $storageAccountName --account-key $storageKey --source-uri $sasUrl
        
        # Wait for copy to complete
        $copyStatus = ""
        while ($copyStatus -ne "success") {
            Start-Sleep -Seconds 10
            $copyStatus = az storage blob show --container-name vhd --name $vhdName --account-name $storageAccountName --account-key $storageKey --query "properties.copy.status" -o tsv
            Write-Host "Copy status: $copyStatus"
        }
        
        # Revoke access to the image
        az image revoke-access --resource-group $resourceGroup --name $imageName
        
        Write-Host "VHD exported successfully to storage account: $storageAccountName"
